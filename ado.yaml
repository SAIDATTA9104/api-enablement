trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '*.tf'
    - '*.tfvars'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: terraformVersion
    value: '1.5.7'
  - name: serviceAccountKey
    value: 'sa.google.com.json'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)'

stages:
- stage: Validate
  jobs:
  - job: ValidateTerraform
    steps:
    - task: DownloadSecureFile@1
      name: serviceAccountKeyFile
      displayName: 'Download Service Account Key'
      inputs:
        secureFile: '$(serviceAccountKey)'
    
    - script: |
        cp $(serviceAccountKeyFile.secureFilePath) $(workingDirectory)/$(serviceAccountKey)
      displayName: 'Copy Service Account Key to Working Directory'
    
    - task: TerraformInstaller@0
      displayName: 'Install Terraform $(terraformVersion)'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workingDirectory)'
        backendServiceArm: 'AzureServiceConnection'
        backendAzureRmResourceGroupName: 'TerraformStateRG'
        backendAzureRmStorageAccountName: 'tfstatestorage'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'gcp-api-enablement.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(workingDirectory)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(workingDirectory)'
        environmentServiceNameAzureRM: 'AzureServiceConnection'

- stage: Apply
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - deployment: ApplyTerraform
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            name: serviceAccountKeyFile
            displayName: 'Download Service Account Key'
            inputs:
              secureFile: '$(serviceAccountKey)'
          
          - script: |
              cp $(serviceAccountKeyFile.secureFilePath) $(workingDirectory)/$(serviceAccountKey)
            displayName: 'Copy Service Account Key to Working Directory'
          
          - task: TerraformInstaller@0
            displayName: 'Install Terraform $(terraformVersion)'
            inputs:
              terraformVersion: '$(terraformVersion)'
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)'
              backendServiceArm: 'AzureServiceConnection'
              backendAzureRmResourceGroupName: 'TerraformStateRG'
              backendAzureRmStorageAccountName: 'tfstatestorage'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'gcp-api-enablement.tfstate'
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(workingDirectory)'
              environmentServiceNameAzureRM: 'AzureServiceConnection'
              commandOptions: '-auto-approve'
          
          - script: |
              rm -f $(workingDirectory)/$(serviceAccountKey)
            displayName: 'Clean up Service Account Key'
            condition: always()
